// Code generated by MockGen. DO NOT EDIT.
// Source: sessionStorage.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	users "social-network/pkg/users"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionStorageInterface is a mock of SessionStorageInterface interface.
type MockSessionStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStorageInterfaceMockRecorder
}

// MockSessionStorageInterfaceMockRecorder is the mock recorder for MockSessionStorageInterface.
type MockSessionStorageInterfaceMockRecorder struct {
	mock *MockSessionStorageInterface
}

// NewMockSessionStorageInterface creates a new mock instance.
func NewMockSessionStorageInterface(ctrl *gomock.Controller) *MockSessionStorageInterface {
	mock := &MockSessionStorageInterface{ctrl: ctrl}
	mock.recorder = &MockSessionStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStorageInterface) EXPECT() *MockSessionStorageInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSessionStorageInterface) Add(id users.UserID, expire time.Duration) (SessionId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id, expire)
	ret0, _ := ret[0].(SessionId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSessionStorageInterfaceMockRecorder) Add(id, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSessionStorageInterface)(nil).Add), id, expire)
}

// Remove mocks base method.
func (m *MockSessionStorageInterface) Remove(arg0 SessionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSessionStorageInterfaceMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSessionStorageInterface)(nil).Remove), arg0)
}
