// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package endpoints

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	users "social-network/pkg/users"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCec9433bDecodeSocialNetworkPkgUsersEndpoints(in *jlexer.Lexer, out *PostRegistrationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = users.UserID(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCec9433bEncodeSocialNetworkPkgUsersEndpoints(out *jwriter.Writer, in PostRegistrationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostRegistrationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCec9433bEncodeSocialNetworkPkgUsersEndpoints(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostRegistrationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCec9433bEncodeSocialNetworkPkgUsersEndpoints(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostRegistrationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCec9433bDecodeSocialNetworkPkgUsersEndpoints(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostRegistrationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCec9433bDecodeSocialNetworkPkgUsersEndpoints(l, v)
}
func easyjsonCec9433bDecodeSocialNetworkPkgUsersEndpoints1(in *jlexer.Lexer, out *PostRegistrationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "age":
			out.Age = int8(in.Int8())
		case "gender":
			out.Gender = users.Gender(in.Uint8())
		case "city":
			out.City = string(in.String())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Interests = append(out.Interests, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCec9433bEncodeSocialNetworkPkgUsersEndpoints1(out *jwriter.Writer, in PostRegistrationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int8(int8(in.Age))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Gender))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Interests {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostRegistrationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCec9433bEncodeSocialNetworkPkgUsersEndpoints1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostRegistrationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCec9433bEncodeSocialNetworkPkgUsersEndpoints1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostRegistrationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCec9433bDecodeSocialNetworkPkgUsersEndpoints1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostRegistrationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCec9433bDecodeSocialNetworkPkgUsersEndpoints1(l, v)
}
